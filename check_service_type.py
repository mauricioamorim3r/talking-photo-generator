"""
Check if frontend service needs to be recreated as static site
"""
import requests
import os

API_KEY = os.getenv("RENDER_API_KEY", "rnd_kbYq0mcIml5b2eOSsGUmfSDmlT8S")
SERVICE_ID = "srv-d3qd08ali9vc73c8a5f0"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Accept": "application/json"
}

print("üîç Verificando configura√ß√£o do servi√ßo frontend...\n")

response = requests.get(
    f"https://api.render.com/v1/services/{SERVICE_ID}",
    headers=headers
)

if response.status_code == 200:
    data = response.json()
    service_type = data.get("service", {}).get("type")
    name = data.get("service", {}).get("name")
    
    print(f"üìã Servi√ßo: {name}")
    print(f"üîß Tipo atual: {service_type}")
    print(f"üÜî ID: {SERVICE_ID}\n")
    
    if service_type == "static_site":
        print("‚úÖ Servi√ßo j√° √© do tipo 'static_site'!")
        print("   O _redirects file deve funcionar agora.")
    elif service_type == "web_service":
        print("‚ö†Ô∏è  Servi√ßo ainda √© do tipo 'web_service'")
        print("\nüìù A√á√ÉO NECESS√ÅRIA:")
        print("   1. Acesse: https://dashboard.render.com/static/srv-d3qd08ali9vc73c8a5f0")
        print("   2. Ou RECRIE o servi√ßo:")
        print("      - Delete o servi√ßo atual")
        print("      - Crie novo 'Static Site' com:")
        print("        ‚Ä¢ Build Command: cd frontend && npm install --legacy-peer-deps && npm run build")
        print("        ‚Ä¢ Publish Directory: frontend/build")
        print("        ‚Ä¢ Auto-deploy: Yes")
    else:
        print(f"‚ùì Tipo desconhecido: {service_type}")
else:
    print(f"‚ùå Erro ao buscar servi√ßo: {response.status_code}")
    print(f"   {response.text}")
